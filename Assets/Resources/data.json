{
  "puzzles": {
    "quiz": {
      "numberOfAnswersNeeded": 3,
      "questions": [
        {
          "text": "Which of the following is a contextual keyword in C#?",
          "choices": [
            {
              "text": "get",
              "isCorrect": false
            },
            {
              "text": "set",
              "isCorrect": false
            },
            {
              "text": "add",
              "isCorrect": false
            },
            {
              "text": "All of them",
              "isCorrect": true
            }
          ]
        },
        {
          "text": "Which of the following operator returns the address of an variable in C#?",
          "choices": [
            {
              "text": "sizeof",
              "isCorrect": false
            },
            {
              "text": "typeof",
              "isCorrect": false
            },
            {
              "text": "&",
              "isCorrect": true
            },
            {
              "text": "*",
              "isCorrect": false
            }
          ]
        },
        {
          "text": "Which of the following access specifier in C# allows a class to expose its member variables and member functions to other functions and objects?",
          "choices": [
            {
              "text": "Public",
              "isCorrect": true
            },
            {
              "text": "Private",
              "isCorrect": false
            },
            {
              "text": "Protected",
              "isCorrect": false
            },
            {
              "text": "Internal",
              "isCorrect": false
            }
          ]
        },
        {
          "text": "Which of the following converts a floating point or integer type to a decimal type in C#?",
          "choices": [
            {
              "text": "ToDecimal",
              "isCorrect": true
            },
            {
              "text": "ToDouble",
              "isCorrect": false
            },
            {
              "text": "ToInt16",
              "isCorrect": false
            },
            {
              "text": "ToInt32",
              "isCorrect": false
            }
          ]
        },
        {
          "text": "Which of the following preprocessor directive allows creating a compound conditional directive in C#?",
          "choices": [
            {
              "text": "elif",
              "isCorrect": true
            },
            {
              "text": "define",
              "isCorrect": false
            },
            {
              "text": "if",
              "isCorrect": false
            },
            {
              "text": "else",
              "isCorrect": false
            }
          ]
        }
      ],
      "helps": [ "There is only one right answer to each question."]
    },
    "computer": {
      "code": "public enum Demo { a, b = 5, c, d}\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Demo d = Demo.a;\r\n        d += 6;\r\n        Console.Write(d);\r\n        d += 6;\r\n        Console.Write(d);\r\n        Console.ReadLine();\r\n    }\r\n}",
      "expectedAnswer": "c12",
      "helps": [
        "Enums are actually numbers.",
        "By default, enum values are 0, 1, 2, ...",
        "If a specific value is set, next number values continue from there.",
        "The number values here are 0, 5, 6, 7.",
        "An enum's label is printed only if the underlying value HAS a corresponding label."
      ]
    },
    "wordBoard": {
      "incorrectWords": [ "dddd", "156+d", "123456+", "169-", "1234+-156", "1d", "hello, 123+", "^abcdefgh$", "+370(638)36830", "+370+", "clickme", "15   +   6" ],
      "correctWords": [ "d1", "169", "hello, 123", "156\\15", "+37012345678", "test test 123", "wrong1", "123+56*3/1-6", "abc156*123", "123456+15963" ],
      "helps": [
        "\"^\" matches start, \"$\" matches end of string.",
        "\"\\d\" matches a single digit. \"\\D\" matches a single non-digit character.",
        "\"+\" matches one or more times. \"*\" matches zero or more times.",
        "\"\\\" escape special characters.",
        "\"[\" and \"]\" enclose a list. Exactly one character from the list is matched.",
        "\"(\" and \")\" enclose a group. Quantifiers (\"+\" or \"*\") can be applied to groups."
      ]
    },
    "cubes": {
      "questions": [ "Int", "String", "Float", "Char", "Boolean" ],
      "answers": [ "5", "Amazing", "9.1", "A", "true" ],
      "wordsBoardTask": "^\\D*\\d+([\\+\\-\\*\\/]\\d+)*$",
      "helps": [ "Put the cubes on correct tables by carying them."]
    },
    "boatBoard": {
      "task": "var code = string.Join(\"\", \"17632949971127\".Where((c, i) => i % 2 == 0 ? c >= '5' : c < '7'));",
      "answer": "6391",
      "helps": [
        "Safe is special interactable object. You dont't need to press e - just enter the numbers.",
        "\"a ? b : c\" returns \"b\" if \"a\" is true and \"c\" otherwise.",
        "\"Where(p)\" filters a sequence of elements based on the predicate \"p\".",
        "\"c\" in this case denotes an element of the sequence and \"i\" - its index.",
        "\"string.Join(d, s)\" joins the sequence \"s\" using a delimeter \"d\".",
        "After filtering the first 3 characters, only the \"6\" is left."
      ]
    },
    "instructionsParrot": {
      "helps": [ "Hi, I’m polly!", "Wow, there’s sure a lot of water around. That must be important...", "What are you standing around for? Go look around the shore!" ]
    }
  }
}